rm(medianOpenPorchSF)
rm(a)
## Asigno mediana segun el area
a <- dsDataAll %>%
filter(EnclosedPorch!=0 & GrLivArea > 1800 & GrLivArea < 1850) %>%
select(EnclosedPorch)
medianEnclosedPorch <- median(a$EnclosedPorch)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(EnclosedPorch = ifelse(OpenPorchSF>600,medianEnclosedPorch,EnclosedPorch))
rm(medianEnclosedPorch)
rm(a)
dsDataAll <- dsDataAll %>%
mutate(YearRemodAdd = ifelse(YearBuilt<1950 & YearRemodAdd==1950,YearBuilt,YearRemodAdd))
dsDataAll <- select(dsDataAll, -GarageYrBlt)
save(dsDataAll, file = './F01_Datos/F01_dsDataAll.RData')
#load('./F01_Datos/F01_dsDataAll.RData')
dsDataAllRecipe <- dsDataAll %>%
mutate(SalePrice = log(SalePrice))
dsTrain <- dsDataAllRecipe %>%
filter(indTrain == 1) %>%
select(SalePrice, everything()) %>%
select(-c(Id,indTrain))
dim(dsTrain)
set.seed(123)
iTrain  <- createDataPartition(y=dsTrain$SalePrice, p=0.7, list=F)
dsTrain.training <- dsTrain[iTrain, ]
dsTrain.CV       <- dsTrain[-iTrain, ]
objRecipe <- recipe(formula = SalePrice ~ ., data =  dsTrain.training)
if(!is.element("recipes", installed.packages()[, 1]))
install.packages("recipes", repos = 'http://cran.us.r-project.org')
library(recipes)
objRecipe <- recipe(formula = SalePrice ~ ., data =  dsTrain.training)
# Eliminación variables con varianza próxima a cero
objRecipe <- objRecipe %>% step_nzv(all_predictors())
# Estandarización y escalado, sobre las variables numéricas
objRecipe <- objRecipe %>% step_center(all_numeric(), -SalePrice)
objRecipe <- objRecipe %>% step_scale(all_numeric(), -SalePrice)
#Binarización de variables nominales
objRecipe <- objRecipe %>% step_dummy(all_nominal(), -all_outcomes())
# Eliminación variables con varianza próxima a cero para DUMMY
objRecipe <- objRecipe %>% step_nzv(all_predictors())
objRecipe
trained_recipe <- prep(objRecipe, training = dsTrain.training)
trained_recipe
dsDataAllRecipe.prep <- bake(trained_recipe, new_data = dsDataAllRecipe)
#Guardamos en el dataset dsDataAll los resultados incluidos los campos Id e indTrain
dsDataAll <- cbind(dsDataAllRecipe[,1:3], dsDataAllRecipe.prep[,-1])
dsTrain <- dsDataAll %>%
filter(indTrain == 1) %>%
select(SalePrice, everything()) %>%
select(-c(Id,indTrain))
dim(dsTrain)
set.seed(123)
iTrain  <- createDataPartition(y=dsTrain$SalePrice, p=0.7, list=F)
dsTrain.training <- dsTrain[iTrain, ]
dsTrain.CV       <- dsTrain[-iTrain, ]
dsTest <- dsDataAll %>%
filter(indTrain == 0) %>%
select(SalePrice, everything())
#Defino conjuntos de número de predictores a probar.
subsets <- c(5, 10, 12, 14, 16, 18, 20, 25, 30, 35, 40, 50, 60)
control <- rfeControl(functions = rfFuncs
,method = "repeatedcv" # Validación cruzada
,repeats = 5
,verbose = FALSE)
t <- proc.time() # Inicia el cronómetro
rf_rfe <- rfe(SalePrice ~ .
, data = dsTrain.training
, sizes = subsets
, metric = "RMSE"
, rfeControl = control)
knitr::opts_chunk$set(message=F, warning=F)
if(!is.element("dplyr", installed.packages()[, 1]))
install.packages("dplyr", repos = 'http://cran.us.r-project.org')
library(dplyr)
if(!is.element("tidyr", installed.packages()[, 1]))
install.packages("tidyr", repos = 'http://cran.us.r-project.org')
library(tidyr)
if(!is.element("ggplot2", installed.packages()[, 1]))
install.packages("ggplot2", repos = 'http://cran.us.r-project.org')
library(ggplot2)
if(!is.element("grid", installed.packages()[, 1]))
install.packages("grid", repos = 'http://cran.us.r-project.org')
library(grid)
if(!is.element("gridExtra", installed.packages()[, 1]))
install.packages("gridExtra", repos = 'http://cran.us.r-project.org')
library(gridExtra)
if(!is.element("ggpubr", installed.packages()[, 1]))
install.packages("ggpubr", repos = 'http://cran.us.r-project.org')
library(ggpubr)
if(!is.element("tibble", installed.packages()[, 1]))
install.packages("tibble", repos = 'http://cran.us.r-project.org')
library(tibble)
if(!is.element("caret", installed.packages()[, 1]))
install.packages("caret", repos = 'http://cran.us.r-project.org')
library(caret)
if(!is.element("recipes", installed.packages()[, 1]))
install.packages("recipes", repos = 'http://cran.us.r-project.org')
library(recipes)
dsTrain <- read.csv("./input/train.csv")
dsTest <- read.csv("./input/test.csv")
dsTest <- dsTest %>%
mutate(SalePrice = as.integer(NA), indTrain = 0)
dsDataAll <- dsTrain %>%
mutate(indTrain = 1) %>%
union(dsTest) %>%
select(SalePrice, indTrain, everything())
dsDataAll$indTrain <- as.factor(dsDataAll$indTrain)
# Elimino los conjuntos originales
rm(dsTrain)
rm(dsTest)
dsDataAll <- dsDataAll %>%
mutate_if(is.factor, as.character)
# Dejamos el indicador de entrenamiento como factor
dsDataAll$indTrain <- as.factor(dsDataAll$indTrain)
# Normalizar valores para los campos Exterior1st / Exterior2nd -> cambio valor en excel a
#  Wd Sdng: Wood Siding
#  Wd Shng:	Wood Shingles
dsDataAll <- dsDataAll %>% mutate(Exterior1st = ifelse(Exterior1st=="WdShing","WdShng",Exterior1st))
dsDataAll <- dsDataAll %>% mutate(Exterior1st = ifelse(Exterior1st=="Wd Sdng","WdSdng",Exterior1st))
dsDataAll <- dsDataAll %>% mutate(Exterior1st = ifelse(Exterior1st=="Wd Shng","WdShng",Exterior1st))
# Exterior2nd CmentBd el valor real es CemntBd (al igual que Exterior1st) filter(dsDataAll,Exterior1st=="CemntBd")
dsDataAll <- dsDataAll %>% mutate(Exterior2nd = ifelse(Exterior2nd=="CmentBd","CemntBd",Exterior2nd))
dsDataAll <- dsDataAll %>% mutate(Exterior2nd = ifelse(Exterior2nd=="Wd Sdng","WdSdng",Exterior2nd))
dsDataAll <- dsDataAll %>% mutate(Exterior2nd = ifelse(Exterior2nd=="Wd Shng","WdShng",Exterior2nd))
dsDataAll <- dsDataAll %>% mutate(Exterior2nd = ifelse(Exterior2nd=="Brk Cmn","BrkComm",Exterior2nd))
dsDataAll <- dsDataAll %>% mutate(MSZoning = ifelse(MSZoning=="C (all)","C",MSZoning))
dsDataAll <- dsDataAll %>% mutate(RoofMatl = ifelse(RoofMatl=="Tar&Grv","Tar",RoofMatl))
missingData <- dsDataAll %>%
summarise_all(funs(sum(is.na(.)))) %>%
gather("column") %>%
rename(NumNAs = value) %>%
mutate(PrcNAs = NumNAs/nrow(dsDataAll)) %>%
filter(NumNAs!=0) %>%
arrange(desc(PrcNAs))
head(missingData) # presento solo los primeros
# PoolQC - Calidad de la piscina
# MiscFeature -  características varias no cubiertas en otras categorías
# Alley - tipo de acceso al callejón
# Fence - calidad de la cerca
eliminar <- filter(missingData, PrcNAs > 0.80) %>% select(column)
dsDataAll <- dsDataAll %>%
select(-c(eliminar$column))
rm(eliminar)
dsDataAll <- select(dsDataAll, -Utilities)
#Ordinales asigno texto None
dsDataAll <- mutate(dsDataAll, FireplaceQu = ifelse(is.na(FireplaceQu),"None",FireplaceQu))
dsDataAll <- mutate(dsDataAll, GarageCond = ifelse(is.na(GarageCond),"None",GarageCond))
dsDataAll <- mutate(dsDataAll, GarageQual = ifelse(is.na(GarageQual),"None",GarageQual))
dsDataAll <- mutate(dsDataAll, GarageFinish = ifelse(is.na(GarageFinish),"None",GarageFinish))
dsDataAll <- mutate(dsDataAll, GarageType = ifelse(is.na(GarageType),"None",GarageType))
dsDataAll <- mutate(dsDataAll, BsmtFinType2 = ifelse(is.na(BsmtFinType2),"None",BsmtFinType2))
dsDataAll <- mutate(dsDataAll, BsmtQual = ifelse(is.na(BsmtQual),"None",BsmtQual))
dsDataAll <- mutate(dsDataAll, BsmtCond = ifelse(is.na(BsmtCond),"None",BsmtCond))
dsDataAll <- mutate(dsDataAll, BsmtExposure = ifelse(is.na(BsmtExposure),"None",BsmtExposure))
dsDataAll <- mutate(dsDataAll, BsmtFinType1 = ifelse(is.na(BsmtFinType1),"None",BsmtFinType1))
dsDataAll <- mutate(dsDataAll, MasVnrType = ifelse(is.na(MasVnrType),"None",MasVnrType))
#Discretas y continuas 0
dsDataAll <- mutate(dsDataAll, GarageYrBlt = ifelse(is.na(GarageYrBlt),0,GarageYrBlt))
dsDataAll <- mutate(dsDataAll, GarageCars = ifelse(is.na(GarageCars),0,GarageCars))
dsDataAll <- mutate(dsDataAll, GarageArea = ifelse(is.na(GarageArea),0,GarageArea))
dsDataAll <- mutate(dsDataAll, TotalBsmtSF = ifelse(is.na(TotalBsmtSF),0,TotalBsmtSF))
dsDataAll <- mutate(dsDataAll, BsmtFinSF1 = ifelse(is.na(BsmtFinSF1),0,BsmtFinSF1))
dsDataAll <- mutate(dsDataAll, BsmtFinSF2 = ifelse(is.na(BsmtFinSF2),0,BsmtFinSF2))
dsDataAll <- mutate(dsDataAll, BsmtUnfSF = ifelse(is.na(BsmtUnfSF),0,BsmtUnfSF))
dsDataAll <- mutate(dsDataAll, BsmtFullBath = ifelse(is.na(BsmtFullBath),0,BsmtFullBath))
dsDataAll <- mutate(dsDataAll, BsmtHalfBath = ifelse(is.na(BsmtHalfBath),0,BsmtHalfBath))
dsDataAll <- mutate(dsDataAll, MasVnrArea = ifelse(is.na(MasVnrArea),0,MasVnrArea))
dsDataAll <- mutate(dsDataAll, LotFrontage = ifelse(is.na(LotFrontage),mean(dsDataAll$LotFrontage,na.rm = TRUE),LotFrontage))
# Nominales asigno valor medio
dsDataAll <- mutate(dsDataAll, MSZoning = ifelse(is.na(MSZoning),"RL",MSZoning))
dsDataAll <- mutate(dsDataAll, Functional = ifelse(is.na(Functional),"Typ",Functional))
dsDataAll <- mutate(dsDataAll, Exterior1st = ifelse(is.na(Exterior1st),"VinylSd",Exterior1st))
dsDataAll <- mutate(dsDataAll, Exterior2nd = ifelse(is.na(Exterior2nd),"VinylSd",Exterior2nd))
dsDataAll <- mutate(dsDataAll, Electrical = ifelse(is.na(Electrical),"SBrkr",Electrical))
dsDataAll <- mutate(dsDataAll, KitchenQual = ifelse(is.na(KitchenQual),"TA",KitchenQual))
dsDataAll <- mutate(dsDataAll, SaleType = ifelse(is.na(SaleType),"WD",SaleType))
missingData <- dsDataAll %>%
summarise_all(funs(sum(is.na(.)))) %>%
gather("column") %>%
rename(NumNAs = value) %>%
mutate(PrcNAs = NumNAs/nrow(dsDataAll)) %>%
filter(NumNAs!=0) %>%
arrange(desc(PrcNAs))
rm(missingData)
dsDataAll$ExterQual <- factor(dsDataAll$ExterQual, levels = rev(c("Ex","Gd","TA","Fa","Po")))
dsDataAll$ExterQual <- as.numeric(c(dsDataAll$ExterQual))
dsDataAll$ExterCond <- factor(dsDataAll$ExterCond, levels = rev(c("Ex","Gd","TA","Fa","Po")))
dsDataAll$ExterCond <- as.numeric(c(dsDataAll$ExterCond))
dsDataAll$LotShape <- factor(dsDataAll$LotShape, levels = rev(c("Reg","IR1","IR2","IR3")))
dsDataAll$LotShape <- as.numeric(c(dsDataAll$LotShape))
dsDataAll$LandSlope <- factor(dsDataAll$LandSlope, levels = rev(c("Gtl","Mod","Sev")))
dsDataAll$LandSlope <- as.numeric(c(dsDataAll$LandSlope))
dsDataAll$BsmtQual <- factor(dsDataAll$BsmtQual, levels = rev(c("Ex","Gd","TA","Fa","Po","None")))
dsDataAll$BsmtQual <- as.numeric(c(dsDataAll$BsmtQual))-1
dsDataAll$BsmtCond <- factor(dsDataAll$BsmtCond, levels = rev(c("Ex","Gd","TA","Fa","Po","None")))
dsDataAll$BsmtCond <- as.numeric(c(dsDataAll$BsmtCond))-1
dsDataAll$BsmtExposure <- factor(dsDataAll$BsmtExposure, levels = rev(c("Gd","Av","Mn","No","None")))
dsDataAll$BsmtExposure <- as.numeric(c(dsDataAll$BsmtExposure))-1
dsDataAll$BsmtFinType1 <- factor(dsDataAll$BsmtFinType1, levels = rev(c("GLQ","ALQ","BLQ","Rec","LwQ","Unf","None")))
dsDataAll$BsmtFinType1 <- as.numeric(c(dsDataAll$BsmtFinType1))-1
dsDataAll$BsmtFinType2 <- factor(dsDataAll$BsmtFinType2, levels = rev(c("GLQ","ALQ","BLQ","Rec","LwQ","Unf","None")))
dsDataAll$BsmtFinType2 <- as.numeric(c(dsDataAll$BsmtFinType2))-1
dsDataAll$HeatingQC <- factor(dsDataAll$HeatingQC, levels = rev(c("Ex","Gd","TA","Fa","Po")))
dsDataAll$HeatingQC <- as.numeric(c(dsDataAll$HeatingQC))
dsDataAll$Electrical <- factor(dsDataAll$Electrical, levels = rev(c("SBrkr","FuseA","FuseF","FuseP","Mix")))
dsDataAll$Electrical <- as.numeric(c(dsDataAll$Electrical))
dsDataAll$KitchenQual <- factor(dsDataAll$KitchenQual, levels = rev(c("Ex","Gd","TA","Fa","Po")))
dsDataAll$KitchenQual <- as.numeric(c(dsDataAll$KitchenQual))
dsDataAll$Functional <- factor(dsDataAll$Functional, levels = rev(c("Typ","Min1","Min2","Mod","Maj1","Maj2","Sev","Sal")))
dsDataAll$Functional <- as.numeric(c(dsDataAll$Functional))
dsDataAll$FireplaceQu <- factor(dsDataAll$FireplaceQu, levels = rev(c("Ex","Gd","TA","Fa","Po","None")))
dsDataAll$FireplaceQu <- as.numeric(c(dsDataAll$FireplaceQu))-1
dsDataAll$GarageFinish <- factor(dsDataAll$GarageFinish, levels = rev(c("Fin","RFn","Unf","None")))
dsDataAll$GarageFinish <- as.numeric(c(dsDataAll$GarageFinish))-1
dsDataAll$GarageQual <- factor(dsDataAll$GarageQual, levels = rev(c("Ex","Gd","TA","Fa","Po","None")))
dsDataAll$GarageQual <- as.numeric(c(dsDataAll$GarageQual))-1
dsDataAll$GarageCond <- factor(dsDataAll$GarageCond, levels = rev(c("Ex","Gd","TA","Fa","Po","None")))
dsDataAll$GarageCond <- as.numeric(c(dsDataAll$GarageCond))-1
dsDataAll$PavedDrive <- factor(dsDataAll$PavedDrive, levels = rev(c("Y","P","N")))
dsDataAll$PavedDrive <- as.numeric(c(dsDataAll$PavedDrive))
dsDataAll <- dsDataAll %>%
mutate_if(is.character, as.factor)
dsDataAll$MSSubClass <- as.factor(dsDataAll$MSSubClass)
#  Grvl:  12
#  Pave:2907
dsDataAll$StreetPave[dsDataAll$Street != "Pave"] <- "0"
dsDataAll$StreetPave[dsDataAll$Street == "Pave"] <- "1"
dsDataAll$StreetPave <- as.numeric(dsDataAll$StreetPave)
dsDataAll <- select(dsDataAll, -Street)
# CentralAir
# Y:2723
# N: 196
dsDataAll$CentralAir <- as.character(dsDataAll$CentralAir)
dsDataAll$CentralAir[dsDataAll$CentralAir != "Y"] <- "0"
dsDataAll$CentralAir[dsDataAll$CentralAir == "Y"] <- "1"
dsDataAll$CentralAir <- as.numeric(dsDataAll$CentralAir)
# Se eliminan las filas
eliminar <- dsDataAll %>%
filter(indTrain==1&GrLivArea>4500) %>%
select(Id, GrLivArea, SalePrice, indTrain)
dsDataAll <- dsDataAll %>%
anti_join(eliminar,by="Id")
rm(eliminar)
# Calculo mediana por tipo de construcción
lotAreaMedian <- select(dsDataAll,BldgType,LotArea) %>%
group_by(BldgType) %>%
summarise(medianLotArea = median(LotArea))
f <- function(x){
a <- as.numeric(lotAreaMedian[lotAreaMedian$BldgType==x,2])
return(a)
}
# Seleccion Outliers
outlier_values <- as.data.frame(boxplot.stats(dsDataAll$LotArea)$out)
names(outlier_values) = "LotArea"
outlier_values$LotArea <- as.numeric(outlier_values$LotArea)
outlier_values <- outlier_values %>%
arrange(desc(LotArea)) %>%
top_n(4)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(LotArea = ifelse(LotArea>=115149,f(BldgType),LotArea))
rm(outlier_values)
rm(lotAreaMedian)
rm(f)
a <- dsDataAll %>%
select(LowQualFinSF) %>%
filter(LowQualFinSF!=0)
# Parece que existe un par de valores extraños
# Actualizo a la mediana de todos los valores no cero
medianLowQualFinSF <- median(a$LowQualFinSF)
#select(data,Id,LowQualFinSF) %>% filter(LowQualFinSF>600)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(LowQualFinSF = ifelse(LowQualFinSF>600,medianLowQualFinSF,LowQualFinSF))
rm(medianLowQualFinSF)
rm(a)
a <- dsDataAll %>%
select(MasVnrArea) %>%
filter(MasVnrArea!=0)
# Parece que existe un valor extraño
# Actualizo a la mediana de todos los valores no cero
medianMasVnrArea <- median(a$MasVnrArea)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(MasVnrArea = ifelse(MasVnrArea>1500,medianMasVnrArea,MasVnrArea))
rm(medianMasVnrArea)
rm(a)
a <- dsDataAll %>%
filter(WoodDeckSF!=0 & GrLivArea > 1300 & GrLivArea < 1400) %>%
select(WoodDeckSF)
medianWoodDeckSF <- median(a$WoodDeckSF)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(WoodDeckSF = ifelse(WoodDeckSF>1500,medianWoodDeckSF,WoodDeckSF))
rm(medianWoodDeckSF)
rm(a)
a <- dsDataAll %>%
filter(OpenPorchSF!=0 & GrLivArea > 700 & GrLivArea < 750) %>%
select(OpenPorchSF)
medianOpenPorchSF <- median(a$OpenPorchSF)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(OpenPorchSF = ifelse(OpenPorchSF>500&GrLivArea<1000,medianOpenPorchSF,OpenPorchSF))
a <- dsDataAll %>%
filter(OpenPorchSF!=0 & GrLivArea > 2550 & GrLivArea < 2650) %>%
select(OpenPorchSF)
medianOpenPorchSF <- median(a$OpenPorchSF)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(OpenPorchSF = ifelse(OpenPorchSF>600,medianOpenPorchSF,OpenPorchSF))
rm(medianOpenPorchSF)
rm(a)
## Asigno mediana segun el area
a <- dsDataAll %>%
filter(EnclosedPorch!=0 & GrLivArea > 1800 & GrLivArea < 1850) %>%
select(EnclosedPorch)
medianEnclosedPorch <- median(a$EnclosedPorch)
# Modificación directa
dsDataAll <- dsDataAll %>%
rowwise() %>%
mutate(EnclosedPorch = ifelse(OpenPorchSF>600,medianEnclosedPorch,EnclosedPorch))
rm(medianEnclosedPorch)
rm(a)
dsDataAll <- dsDataAll %>%
mutate(YearRemodAdd = ifelse(YearBuilt<1950 & YearRemodAdd==1950,YearBuilt,YearRemodAdd))
dsDataAll <- select(dsDataAll, -GarageYrBlt)
save(dsDataAll, file = './F01_Datos/F01_dsDataAll.RData')
#load('./F01_Datos/F01_dsDataAll.RData')
dsDataAllRecipe <- dsDataAll %>%
mutate(SalePrice = log(SalePrice))
dsTrain <- dsDataAllRecipe %>%
filter(indTrain == 1) %>%
select(SalePrice, everything()) %>%
select(-c(Id,indTrain))
dim(dsTrain)
set.seed(123)
iTrain  <- createDataPartition(y=dsTrain$SalePrice, p=0.7, list=F)
dsTrain.training <- dsTrain[iTrain, ]
dsTrain.CV       <- dsTrain[-iTrain, ]
objRecipe <- recipe(formula = SalePrice ~ ., data =  dsTrain.training)
# Eliminación variables con varianza próxima a cero
objRecipe <- objRecipe %>% step_nzv(all_predictors())
# Estandarización y escalado, sobre las variables numéricas
objRecipe <- objRecipe %>% step_center(all_numeric(), -SalePrice)
objRecipe <- objRecipe %>% step_scale(all_numeric(), -SalePrice)
#Binarización de variables nominales
objRecipe <- objRecipe %>% step_dummy(all_nominal(), -all_outcomes())
# Eliminación variables con varianza próxima a cero para DUMMY
objRecipe <- objRecipe %>% step_nzv(all_predictors())
objRecipe
trained_recipe <- prep(objRecipe, training = dsTrain.training)
trained_recipe
dsDataAllRecipe.prep <- bake(trained_recipe, new_data = dsDataAllRecipe)
#Guardamos en el dataset dsDataAll los resultados incluidos los campos Id e indTrain
dsDataAll <- cbind(dsDataAllRecipe[,1:3], dsDataAllRecipe.prep[,-1])
dsTrain <- dsDataAll %>%
filter(indTrain == 1) %>%
select(SalePrice, everything()) %>%
select(-c(Id,indTrain))
dim(dsTrain)
set.seed(123)
iTrain  <- createDataPartition(y=dsTrain$SalePrice, p=0.7, list=F)
dsTrain.training <- dsTrain[iTrain, ]
dsTrain.CV       <- dsTrain[-iTrain, ]
dsTest <- dsDataAll %>%
filter(indTrain == 0) %>%
select(SalePrice, everything())
load('./F03_SelPredictores/F02_03_dsDataAll_Recipe/F03_2_rfe_rf.RData')
rf_rfe <- F03_2_rfe_rf
rf_rfe
rf_rfe.results <- rf_rfe$results
# Métricas promedio de cada tamaño
rf_rfe.results %>%
group_by(Variables) %>%
summarise(media_RMSE = mean(RMSE), media_Rsquared = mean(Rsquared)) %>%
arrange(media_RMSE)
# Gráfica de disminución de RMSE
ggplot(data = rf_rfe.results, aes(x = Variables, y = RMSE)) +
geom_line() +
scale_x_continuous(breaks  = unique(rf_rfe.results$Variables)) +
geom_point() +
geom_errorbar(aes(ymin = RMSE - RMSESD, ymax = RMSE + RMSESD),
width = 0.2) +
geom_point(data = rf_rfe.results %>% slice(which.min(RMSE)),
color = "red") +
theme_bw()
rf_rfe.results <- rf_rfe$results
# Métricas promedio de cada tamaño
rf_rfe.results %>%
group_by(Variables) %>%
summarise(media_RMSE = mean(RMSE), media_Rsquared = mean(Rsquared)) %>%
arrange(media_RMSE)
mejorAbsoluto <- pickSizeBest(select(dsResults,RMSE,Variables)
, metric = "RMSE"
, maximize = FALSE)
dsResults <- rf_rfe$results
# Métricas promedio de cada tamaño
dsResults %>%
group_by(Variables) %>%
summarise(media_RMSE = mean(RMSE), media_Rsquared = mean(Rsquared)) %>%
arrange(media_RMSE)
mejorAbsoluto <- pickSizeBest(select(dsResults,RMSE,Variables)
, metric = "RMSE"
, maximize = FALSE)
mejorRendimiento <- pickSizeTolerance(select(dsResults,RMSE,Variables)
, metric = "RMSE"
, maximize = FALSE)
## Percent Loss in performance (positive)
# ToDo: example$PctLoss <- (example$RMSE - min(example$RMSE))/min(example$RMSE)*100
# Gráfica de disminución de RMSE
ggplot(data = dsResults, aes(x = Variables, y = RMSE)) +
geom_line(color = "blue") +
scale_x_continuous(breaks = unique(dsResults$Variables)) +
geom_point() +
geom_errorbar(aes(ymin = RMSE - RMSESD, ymax = RMSE + RMSESD),
width = 0.2) +
geom_point(data = filter(dsResults, Variables==mejorAbsoluto)
, shape=0, cex= 1.5, color = "red") +
geom_point(data = filter(dsResults, Variables==mejorRendimiento)
, shape = 4, cex= 1.5, color = "green") +
theme_bw()
dsVarSel001 <- as.data.frame(rf_rfe$optVariables) %>%
rename(Campo = 1) %>%
rownames_to_column("Orden") %>%
mutate(Orden = as.numeric(Orden), Campo = as.character(Campo))
# Selecciono los 25 primeros selectores.
dsVarSel <- dsVarSel001 %>% top_n(-18, Orden)
# Guardo un data set con los valores seleccionados
dsDataAllVarSel <- dsDataAll %>%
select(SalePrice, indTrain, Id, c(dsVarSel$Campo))
rm(list= ls()[!(ls() == 'dsDataAllVarSel')])
fnEstudioModelo <- function ( modelo , estudioParam = TRUE){
# modelo
# modelo$finalModel
p1 <- ggplot(data = modelo$resample, aes(x = RMSE)) +
geom_density(alpha = 0.5, fill = "gray50") +
geom_vline(xintercept = mean(modelo$resample$RMSE),
linetype = "dashed") +
theme_bw()
p2 <- ggplot(data = modelo$resample, aes(x = 1, y = RMSE)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5, fill = "gray50") +
geom_jitter(width = 0.05) +
labs(x = "") +
theme_bw() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
#trellis.par.set(caretTheme())
if (estudioParam){
p3 <- plot(modelo)
}
# Error de test
predicciones <- predict(modelo
, newdata = dsTrain.CV
, type = "raw")
# RMSE(predicciones, dsTrain.CV$SalePrice)
# MAE(predicciones, dsTrain.CV$SalePrice)
# R2(predicciones, dsTrain.CV$SalePrice, form = "traditional")
t1 <- capture.output(summary(modelo$resample$RMSE, digits=3))
t1 <- paste("Summary resample$RMSE", " ", paste(t1, collapse="\n"), sep = "\n")
t1 <- text_grob(t1, size = 10)
t2 <- capture.output(postResample(pred = predicciones, obs = dsTrain.CV$SalePrice))
t2 <- paste("Error de test", " ", paste(t2, collapse="\n"), sep = "\n")
t2 <- text_grob(t2, size = 10)
t3 <- capture.output(modelo$finalModel)
t3 <- text_grob(paste(t3, collapse="\n"), size = 9)
grid.arrange(t3, top="Modelo final")
grid.arrange(p1, p2, t1, t2, nrow = 2, top="RMSE obtenido en la validación")
if (estudioParam){
grid.arrange(p3, nrow = 1, top="Evolución del RMSE del modelo en función de hiperparámetros")
}
}
dsTrain <- dsDataAllVarSel %>%
filter(indTrain == 1) %>%
select(SalePrice, everything()) %>%
select(-c(Id,indTrain))
dim(dsTrain)
set.seed(123)
iTrain  <- createDataPartition(y=dsTrain$SalePrice, p=0.7, list=F)
dsTrain.training <- dsTrain[iTrain, ]
dsTrain.CV       <- dsTrain[-iTrain, ]
dsTest <- dsDataAllVarSel %>%
filter(indTrain == 0) %>%
select(SalePrice, everything())
particiones  <- 5
repeticiones <- 5
# Entrenamiento con conjunto de hiperparametros
fitControl <- trainControl(method = "repeatedcv",
number = particiones,
repeats = repeticiones,
returnResamp = "final",
verboseIter = FALSE,
allowParallel = TRUE)
hiperparametros <- expand.grid(sigma = c(0.0005, 0.001, 0.005)
,C = c(1 , 20, 50, 100, 150, 200))
t <- proc.time() # Inicia el cronómetro
modelo_svmRadial <- train(SalePrice ~ .
, data = dsTrain.training
, method = "svmRadial"
, tuneGrid = hiperparametros
, metric = "RMSE"
, trControl = fitControl)
proc.time()-t    # Detiene el cronómetro
# Guardo resultado del calculo
fileOuput <- paste(dirSalida,'/','modelo_svmRadial','.RData',sep='')
